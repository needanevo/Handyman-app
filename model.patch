diff --git a/backend/server.py b/backend/server.py
index 449bc66..d987d71 100644
--- a/backend/server.py
+++ b/backend/server.py
@@ -1,5 +1,5 @@
 from fastapi import FastAPI, APIRouter, HTTPException, status, Depends
-from fastapi.security import HTTPBearer
+from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
 from dotenv import load_dotenv
 from starlette.middleware.cors import CORSMiddleware
 from motor.motor_asyncio import AsyncIOMotorClient
@@ -140,8 +140,9 @@ async def login_user(login_data: UserLogin):
     return Token(access_token=access_token, refresh_token=refresh_token)
 
 @api_router.get("/auth/me", response_model=User)
-async def get_current_user_info(current_user: User = Depends(lambda: get_current_user(auth_handler=auth_handler))):
+async def get_current_user_info(credentials: HTTPAuthorizationCredentials = Depends(security)):
     """Get current user information"""
+    current_user = await get_current_user(credentials, auth_handler)
     return current_user
 
 # ==================== SERVICE CATALOG ROUTES ====================
@@ -184,10 +185,11 @@ async def create_service(
 @api_router.post("/quotes/request")
 async def request_quote(
     quote_request: QuoteRequest,
-    current_user: User = Depends(lambda: get_current_user(auth_handler=auth_handler))
+    credentials: HTTPAuthorizationCredentials = Depends(security)
 ):
     """Request a quote for services"""
     try:
+        current_user = await get_current_user(credentials, auth_handler)
         # Get AI suggestion if enabled
         ai_suggestion = None
         if os.getenv('FEATURE_AI_QUOTE_ENABLED', 'true').lower() == 'true':
@@ -268,10 +270,11 @@ async def request_quote(
 
 @api_router.get("/quotes", response_model=List[Quote])
 async def get_user_quotes(
-    current_user: User = Depends(lambda: get_current_user(auth_handler=auth_handler)),
+    credentials: HTTPAuthorizationCredentials = Depends(security),
     status_filter: Optional[QuoteStatus] = None
 ):
     """Get quotes for current user"""
+    current_user = await get_current_user(credentials, auth_handler)
     query = {"customer_id": current_user.id}
     if status_filter:
         query["status"] = status_filter
@@ -282,9 +285,10 @@ async def get_user_quotes(
 @api_router.get("/quotes/{quote_id}", response_model=Quote)
 async def get_quote(
     quote_id: str,
-    current_user: User = Depends(lambda: get_current_user(auth_handler=auth_handler))
+    credentials: HTTPAuthorizationCredentials = Depends(security)
 ):
     """Get a specific quote"""
+    current_user = await get_current_user(credentials, auth_handler)
     quote = await db.quotes.find_one({"id": quote_id})
     if not quote:
         raise HTTPException(status_code=404, detail="Quote not found")
@@ -301,9 +305,10 @@ async def get_quote(
 async def respond_to_quote(
     quote_id: str,
     response: QuoteResponse,
-    current_user: User = Depends(lambda: get_current_user(auth_handler=auth_handler))
+    credentials: HTTPAuthorizationCredentials = Depends(security)
 ):
     """Accept or reject a quote"""
+    current_user = await get_current_user(credentials, auth_handler)
     quote = await db.quotes.find_one({"id": quote_id, "customer_id": current_user.id})
     if not quote:
         raise HTTPException(status_code=404, detail="Quote not found")
diff --git a/fix_auth_endpoints.py b/fix_auth_endpoints.py
new file mode 100644
index 0000000..4536d9d
--- /dev/null
+++ b/fix_auth_endpoints.py
@@ -0,0 +1,42 @@
+#!/usr/bin/env python3
+"""
+Script to fix authentication dependency injection issues in server.py
+"""
+
+import re
+
+def fix_auth_dependencies():
+    with open('/app/backend/server.py', 'r') as f:
+        content = f.read()
+    
+    # Fix all the lambda dependency injections
+    patterns_to_fix = [
+        (r'current_user: User = Depends\(lambda: get_current_user\(auth_handler=auth_handler\)\)',
+         'credentials: HTTPAuthorizationCredentials = Depends(security)'),
+    ]
+    
+    for old_pattern, new_pattern in patterns_to_fix:
+        content = re.sub(old_pattern, new_pattern, content)
+    
+    # Add current_user retrieval at the beginning of functions that need it
+    functions_to_fix = [
+        ('async def get_user_quotes(', 'current_user = await get_current_user(credentials, auth_handler)'),
+        ('async def get_quote(', 'current_user = await get_current_user(credentials, auth_handler)'),
+        ('async def respond_to_quote(', 'current_user = await get_current_user(credentials, auth_handler)'),
+        ('async def add_address(', 'current_user = await get_current_user(credentials, auth_handler)'),
+        ('async def get_addresses(', 'current_user = await get_current_user(credentials, auth_handler)'),
+    ]
+    
+    for func_signature, auth_line in functions_to_fix:
+        # Find the function and add the auth line after the docstring
+        pattern = rf'({func_signature}[^{{]*{{[^"]*"""[^"]*"""[^\n]*\n)'
+        replacement = rf'\1    {auth_line}\n'
+        content = re.sub(pattern, replacement, content, flags=re.DOTALL)
+    
+    with open('/app/backend/server.py', 'w') as f:
+        f.write(content)
+    
+    print("Fixed authentication dependencies")
+
+if __name__ == '__main__':
+    fix_auth_dependencies()
diff --git a/model.patch b/model.patch
index 288588c..f9d35d7 100644
--- a/model.patch
+++ b/model.patch
@@ -1,47 +0,0 @@
-diff --git a/backend/providers/base.py b/backend/providers/base.py
-index 7c18e83..50798bd 100644
---- a/backend/providers/base.py
-+++ b/backend/providers/base.py
-@@ -8,9 +8,9 @@ class ProviderError(Exception):
- 
- class MockProviderMixin:
-     """Mixin for providers that can operate in mock mode"""
--    def __init__(self, *args, **kwargs):
--        self.mock_mode = kwargs.get('mock_mode', False)
--        super().__init__(*args, **kwargs)
-+    def __init__(self, mock_mode=False, **kwargs):
-+        self.mock_mode = mock_mode
-+        super().__init__(**kwargs)
-         
-     def _mock_log(self, operation: str, data: Dict[str, Any]):
-         """Log mock operations for debugging"""
-diff --git a/model.patch b/model.patch
-index 800e96f..e69de29 100644
---- a/model.patch
-+++ b/model.patch
-@@ -1,25 +0,0 @@
--diff --git a/backend/services/__init__.py b/backend/services/__init__.py
--index f27d297..fdfa0fb 100644
----- a/backend/services/__init__.py
--+++ b/backend/services/__init__.py
--@@ -1,3 +1,3 @@
---from pricing_engine import PricingEngine
--+from .pricing_engine import PricingEngine
-- 
-- __all__ = ["PricingEngine"]
--\ No newline at end of file
--diff --git a/model.patch b/model.patch
--index 06215d7..e69de29 100644
----- a/model.patch
--+++ b/model.patch
--@@ -1,10 +0,0 @@
---diff --git a/backend/services/__init__.py b/backend/services/__init__.py
---index fdfa0fb..f27d297 100644
------ a/backend/services/__init__.py
---+++ b/backend/services/__init__.py
---@@ -1,3 +1,3 @@
----from .pricing_engine import PricingEngine
---+from pricing_engine import PricingEngine
--- 
--- __all__ = ["PricingEngine"]
---\ No newline at end of file
